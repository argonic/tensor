!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=5)}([function(t,e){(function(e){t.exports={mode:"development",devtool:"inline-source-map",entry:"./src/tensor.ts",watch:!0,output:{path:e,filename:"build/tensor.js"},resolve:{extensions:[".ts",".tsx",".js"]},module:{rules:[{test:/\.tsx?$/,use:[{loader:"expose-loader",options:"Tensor"},{loader:"ts-loader"}]}]}}}).call(this,"/")},function(t,e,n){var r=n(0);r.devtool=!1,r.mode="production",r.watch=!1,t.exports=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(this.tensorFilled=!1,this.tensorFill=0,this.tensorDimensions=0,this.tensorStrides=[],this.tensorMax=void 0,this.tensorMin=void 0,1===e.length&&Array.isArray(e[0])&&(e=e[0]),0===e.length)throw new Error("Cannot create zero dimensions tensors");for(var r=0,o=e;r<o.length;r++){var i=o[r];if("number"!=typeof i||i<1||i%1!=0)throw new Error("shape must consist of natural integers")}this.tensorType=t,this.process(e)}return Object.defineProperty(t.prototype,"max",{get:function(){return this.tensorMax},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"min",{get:function(){return this.tensorMin},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"length",{get:function(){return this.tensorLength},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"type",{get:function(){return this.tensorType},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"strides",{get:function(){return this.tensorStrides},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"dimensions",{get:function(){return this.tensorDimensions},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"filling",{get:function(){return this.tensorFill},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"filled",{get:function(){return this.tensorFilled},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"shape",{get:function(){return this.tensorShape},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"T",{get:function(){return this.transpose()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"array",{get:function(){for(var t=[],e=this.tensorDimensions-1,n=this.flat,r=0;r<this.tensorLength;r++)for(var o=this.coordinates(r),i=t,s=0;s<o.length;s++){var h=o[s];"object"==typeof i[h]||(i[h]=[],s!==e)?i=i[h]:i[h]=n[r]}return t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"flat",{get:function(){return this.tensorFilled||(this.tensorFlat=this.getTypedArray(),this.tensorFlat=this.tensorFlat.fill(this.tensorFill),this.tensorFilled=!0),this.tensorFlat},set:function(t){if(t.constructor!==this.flat.constructor)throw new Error("copying from a different TypedArray type is forbidden");if(t.length!==this.tensorLength)throw new Error("supplied array's length doesn't match with tensor's length");this.tensorFlat=t.slice(),this.tensorMin=t.reduce(function(t,e){return Math.min(t,e)}),this.tensorMax=t.reduce(function(t,e){return Math.max(t,e)})},enumerable:!0,configurable:!0}),t.prototype.copy=function(e,n){return void 0===n&&(n=!1),n?(new(t.bind.apply(t,[void 0,e.type].concat(e.shape)))).copy(e):(e.filled?this.tensorFlat=e.flat.slice():this.tensorFlat=null,this.tensorShape=e.shape.slice(),this.tensorStrides=e.strides.slice(),this.tensorLength=e.length,this.tensorDimensions=e.dimensions,this.tensorFill=e.filling,this.tensorFilled=e.filled,this.tensorType=e.type,this.tensorMax=e.max,this.tensorMin=e.min,this)},t.prototype.transpose=function(e){if(void 0===e&&(e=null),null===e){for(var n=[],r=0;r<this.tensorDimensions;r++)n.push(r);e=n.reverse()}var o=[];for(r=0;r<e.length;r++)o[r]=this.tensorShape[e[r]];var i=new(t.bind.apply(t,[void 0,this.tensorType].concat(o))),s=this.getTypedArray(),h=this.flat;for(r=0;r<this.tensorLength;r++){for(var l=this.coordinates(r),a=[],u=0;u<l.length;u++)a[e[u]]=l[u];s[i.index.apply(i,a)]=h[r]}return i.flat=s,i},t.prototype.fill=function(t){if("function"==typeof t){this.tensorFilled=!0,this.tensorFill=null,this.tensorFlat=this.getTypedArray();for(var e=0;e<this.tensorLength;e++){var n=t();this.tensorFlat[e]=n,this.tensorMax=void 0===this.tensorMax?n:Math.max(this.tensorMax,n),this.tensorMin=void 0===this.tensorMin?n:Math.min(this.tensorMin,n)}}else this.tensorFilled=!1,this.tensorFill=t,this.tensorFlat=null,this.tensorMin=t,this.tensorMax=t;return this},t.prototype.coordinates=function(t){for(var e=[],n=t,r=0;r<this.tensorShape.length;r++){var o=Math.floor(n/this.tensorStrides[r]);n-=o*this.tensorStrides[r],e[r]=o}return e},t.prototype.index=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length)return t[0];if(t.length!==this.tensorDimensions)throw new Error("expected exactly "+this.tensorDimensions+" coordinates, got "+t.length+" coordinates instead");for(var n=0,r=0;r<t.length;r++)n+=t[r]*this.tensorStrides[r];return n},t.prototype.get=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return this.flat[this.index.apply(this,t)]},t.prototype.set=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var r=this.flat,o=this.index.apply(this,e),i=r[o];return i===this.tensorMax&&t>i&&(this.tensorMax=t),i===this.tensorMin&&t<i&&(this.tensorMin=t),r[o]=t,this.tensorFlat=r,this},t.prototype.process=function(t){this.tensorShape=t,this.tensorLength=t.reduce(function(t,e){return t*e}),this.tensorDimensions=t.length,this.tensorStrides=[];for(var e=this.tensorShape.length-1;e>=0;e--){var n=this.tensorStrides[e+1],r=e===this.tensorShape.length-1?1:this.tensorShape[e+1];n=void 0===n?1:n,this.tensorStrides[e]=r*n}},t.prototype.getTypedArray=function(){return new this.tensorType(this.length)},t}();e.default=r},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){(function(e){t.exports=e.Tensor=n(2)}).call(this,n(3))},function(t,e,n){n(4),t.exports=n(1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,